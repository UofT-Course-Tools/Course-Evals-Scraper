"""
This type stub file was generated by pyright.
"""

from bs4.builder import HTMLTreeBuilder
from typing import Any, Optional

__license__ = "MIT"
__all__ = ['HTML5TreeBuilder']
class HTML5TreeBuilder(HTMLTreeBuilder):
    """Use html5lib to build a tree."""
    NAME = ...
    features = ...
    def prepare_markup(self, markup, user_specified_encoding, document_declared_encoding: Optional[Any] = ..., exclude_encodings: Optional[Any] = ...):
        self.user_specified_encoding = ...
    
    def feed(self, markup):
        ...
    
    def create_treebuilder(self, namespaceHTMLElements):
        self.underlying_builder = ...
    
    def test_fragment_to_document(self, fragment):
        """See `TreeBuilder`."""
        ...
    


class TreeBuilderForHtml5lib(treebuilder_base.TreeBuilder):
    def __init__(self, namespaceHTMLElements, soup: Optional[Any] = ...):
        ...
    
    def documentClass(self):
        ...
    
    def insertDoctype(self, token):
        ...
    
    def elementClass(self, name, namespace):
        ...
    
    def commentClass(self, data):
        ...
    
    def fragmentClass(self):
        self.soup = ...
    
    def appendChild(self, node):
        ...
    
    def getDocument(self):
        ...
    
    def getFragment(self):
        ...
    
    def testSerializer(self, element):
        ...
    


class AttrList(object):
    def __init__(self, element):
        self.element = ...
        self.attrs = ...
    
    def __iter__(self):
        ...
    
    def __setitem__(self, name, value):
        ...
    
    def items(self):
        ...
    
    def keys(self):
        ...
    
    def __len__(self):
        ...
    
    def __getitem__(self, name):
        ...
    
    def __contains__(self, name):
        ...
    


class Element(treebuilder_base.Node):
    def __init__(self, element, soup, namespace):
        self.element = ...
        self.soup = ...
        self.namespace = ...
    
    def appendChild(self, node):
        ...
    
    def getAttributes(self):
        ...
    
    def setAttributes(self, attributes):
        ...
    
    attributes = ...
    def insertText(self, data, insertBefore: Optional[Any] = ...):
        ...
    
    def insertBefore(self, node, refNode):
        ...
    
    def removeChild(self, node):
        ...
    
    def reparentChildren(self, new_parent):
        """Move all of this tag's children into another tag."""
        ...
    
    def cloneNode(self):
        ...
    
    def hasContent(self):
        ...
    
    def getNameTuple(self):
        ...
    
    nameTuple = ...


class TextNode(Element):
    def __init__(self, element, soup):
        self.element = ...
        self.soup = ...
    
    def cloneNode(self):
        ...
    


