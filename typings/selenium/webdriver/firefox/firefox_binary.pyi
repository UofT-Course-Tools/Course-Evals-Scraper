"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class FirefoxBinary(object):
    NO_FOCUS_LIBRARY_NAME = ...
    def __init__(self, firefox_path: Optional[Any] = ..., log_file: Optional[Any] = ...):
        """
        Creates a new instance of Firefox binary.

        :Args:
         - firefox_path - Path to the Firefox executable. By default, it will be detected from the standard locations.
         - log_file - A file object to redirect the firefox process output to. It can be sys.stdout.
                      Please note that with parallel run the output won't be synchronous.
                      By default, it will be redirected to /dev/null.
        """
        self.command_line = ...
    
    def add_command_line_options(self, *args):
        self.command_line = ...
    
    def launch_browser(self, profile, timeout=...):
        """Launches the browser for the given profile name.
        It is assumed the profile already exists.
        """
        self.profile = ...
    
    def kill(self):
        """Kill the browser.

        This is useful when the browser is stuck.
        """
        ...
    
    def _start_from_profile_path(self, path):
        self.process = ...
    
    def _wait_until_connectable(self, timeout=...):
        """Blocks until the extension is connectable in the firefox."""
        ...
    
    def _find_exe_in_registry(self):
        ...
    
    def _get_firefox_start_cmd(self):
        """Return the command to start firefox."""
        ...
    
    def _default_windows_location(self):
        ...
    
    def _modify_link_library_path(self):
        ...
    
    def _extract_and_check(self, profile, no_focus_so_name, x86, amd64):
        ...
    
    def which(self, fname):
        """Returns the fully qualified path by searching Path of the given
        name"""
        ...
    


